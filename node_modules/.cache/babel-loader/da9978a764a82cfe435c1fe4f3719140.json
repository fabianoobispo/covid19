{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fbc62\\\\OneDrive\\\\Desktop\\\\covid19\\\\src\\\\components\\\\DailyChart\\\\index.js\";\nimport React, { useContext } from 'react';\nimport { ResponsiveLine } from '@nivo/line';\nimport { ThemeContext } from 'styled-components';\nimport { Container, Wrapper, Tip, Scroller } from './styles';\nimport AppContext from \"../../util/AppContext\";\nimport useMobileWatcher from \"../../util/useMobileWatcher\";\n\nconst MyResponsiveLine = () => {\n  var _dailyData$;\n\n  const {\n    dailyData\n  } = useContext(AppContext);\n  const {\n    colors: {\n      recovered,\n      confirmed,\n      primary\n    }\n  } = useContext(ThemeContext);\n  const isMobile = useMobileWatcher();\n  const legends = [{\n    anchor: 'bottom-right',\n    direction: 'column',\n    justify: false,\n    translateX: 100,\n    translateY: 0,\n    itemsSpacing: 0,\n    itemDirection: 'left-to-right',\n    itemWidth: 80,\n    itemHeight: 20,\n    itemOpacity: 0.75,\n    symbolSize: 12,\n    symbolShape: 'circle',\n    itemTextColor: primary,\n    symbolBorderColor: 'rgba(0, 0, 0, .5)',\n    effects: [{\n      on: 'hover',\n      style: {\n        itemBackground: 'rgba(0, 0, 0, .03)',\n        itemOpacity: 1\n      }\n    }]\n  }];\n  const splitNumber = Math.floor((((_dailyData$ = dailyData[0]) === null || _dailyData$ === void 0 ? void 0 : _dailyData$.data) || []).length / 10);\n  return React.createElement(Wrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(Scroller, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(ResponsiveLine, {\n    data: dailyData,\n    margin: {\n      top: 50,\n      right: 110,\n      bottom: 50,\n      left: 60\n    },\n    xScale: {\n      type: 'time',\n      format: '%m/%d/%Y',\n      precision: 'day'\n    },\n    xFormat: \"time:%Y/%m/%d\",\n    yScale: {\n      type: 'linear',\n      min: 'auto',\n      max: 'auto',\n      stacked: false\n    },\n    curve: \"natural\",\n    axisTop: null,\n    axisRight: null,\n    axisBottom: {\n      orient: 'bottom',\n      tickSize: 5,\n      tickPadding: 5,\n      format: '%b %d',\n      tickValues: `every ${splitNumber} days`,\n      tickRotation: 0,\n      legend: 'Date',\n      legendOffset: 36,\n      legendPosition: 'middle'\n    },\n    axisLeft: {\n      orient: 'left',\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: 0,\n      legend: 'Count',\n      legendOffset: -50,\n      legendPosition: 'middle'\n    },\n    colors: [confirmed, recovered],\n    pointSize: isMobile ? 4 : 10,\n    pointColor: {\n      theme: 'background'\n    },\n    pointBorderWidth: 2,\n    pointBorderColor: {\n      from: 'serieColor'\n    },\n    pointLabel: \"y\",\n    pointLabelYOffset: -12,\n    useMesh: true,\n    theme: {\n      crosshair: {\n        line: {\n          stroke: primary\n        }\n      },\n      axis: {\n        legend: {\n          text: {\n            fill: primary\n          }\n        },\n        ticks: {\n          text: {\n            fill: primary\n          }\n        }\n      }\n    },\n    legends: legends,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }))), isMobile ? React.createElement(Tip, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, \"Deslize horizontalmente para ver os dados. Clique para detalhes\") : React.createElement(Tip, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \"Passe o mouse para obter detalhes\"));\n};\n\nexport default MyResponsiveLine;","map":{"version":3,"sources":["C:/Users/fbc62/OneDrive/Desktop/covid19/src/components/DailyChart/index.js"],"names":["React","useContext","ResponsiveLine","ThemeContext","Container","Wrapper","Tip","Scroller","AppContext","useMobileWatcher","MyResponsiveLine","dailyData","colors","recovered","confirmed","primary","isMobile","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","itemTextColor","symbolBorderColor","effects","on","style","itemBackground","splitNumber","Math","floor","data","length","top","right","bottom","left","type","format","precision","min","max","stacked","orient","tickSize","tickPadding","tickValues","tickRotation","legend","legendOffset","legendPosition","theme","from","crosshair","line","stroke","axis","text","fill","ticks"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\r\nimport { ResponsiveLine } from '@nivo/line';\r\nimport { ThemeContext } from 'styled-components';\r\n\r\nimport { Container, Wrapper, Tip, Scroller } from './styles';\r\nimport AppContext from '~/util/AppContext';\r\nimport useMobileWatcher from '~/util/useMobileWatcher';\r\n\r\nconst MyResponsiveLine = () => {\r\n  const { dailyData } = useContext(AppContext);\r\n  const {\r\n    colors: { recovered, confirmed, primary },\r\n  } = useContext(ThemeContext);\r\n\r\n  const isMobile = useMobileWatcher();\r\n\r\n  const legends = [\r\n    {\r\n      anchor: 'bottom-right',\r\n      direction: 'column',\r\n      justify: false,\r\n      translateX: 100,\r\n      translateY: 0,\r\n      itemsSpacing: 0,\r\n      itemDirection: 'left-to-right',\r\n      itemWidth: 80,\r\n      itemHeight: 20,\r\n      itemOpacity: 0.75,\r\n      symbolSize: 12,\r\n      symbolShape: 'circle',\r\n      itemTextColor: primary,\r\n      symbolBorderColor: 'rgba(0, 0, 0, .5)',\r\n      effects: [\r\n        {\r\n          on: 'hover',\r\n          style: {\r\n            itemBackground: 'rgba(0, 0, 0, .03)',\r\n            itemOpacity: 1,\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  const splitNumber = Math.floor((dailyData[0]?.data || []).length / 10);\r\n  return (\r\n    <Wrapper>\r\n      <Scroller>\r\n        <Container>\r\n          <ResponsiveLine\r\n            data={dailyData}\r\n            margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\r\n            xScale={{ type: 'time', format: '%m/%d/%Y', precision: 'day' }}\r\n            xFormat=\"time:%Y/%m/%d\"\r\n            yScale={{\r\n              type: 'linear',\r\n              min: 'auto',\r\n              max: 'auto',\r\n              stacked: false,\r\n            }}\r\n            curve=\"natural\"\r\n            axisTop={null}\r\n            axisRight={null}\r\n            axisBottom={{\r\n              orient: 'bottom',\r\n              tickSize: 5,\r\n              tickPadding: 5,\r\n              format: '%b %d',\r\n              tickValues: `every ${splitNumber} days`,\r\n              tickRotation: 0,\r\n              legend: 'Date',\r\n              legendOffset: 36,\r\n              legendPosition: 'middle',\r\n            }}\r\n            axisLeft={{\r\n              orient: 'left',\r\n              tickSize: 5,\r\n              tickPadding: 5,\r\n              tickRotation: 0,\r\n              legend: 'Count',\r\n              legendOffset: -50,\r\n              legendPosition: 'middle',\r\n            }}\r\n            colors={[confirmed, recovered]}\r\n            pointSize={isMobile ? 4 : 10}\r\n            pointColor={{ theme: 'background' }}\r\n            pointBorderWidth={2}\r\n            pointBorderColor={{ from: 'serieColor' }}\r\n            pointLabel=\"y\"\r\n            pointLabelYOffset={-12}\r\n            useMesh\r\n            theme={{\r\n              crosshair: {\r\n                line: {\r\n                  stroke: primary,\r\n                },\r\n              },\r\n              axis: {\r\n                legend: {\r\n                  text: {\r\n                    fill: primary,\r\n                  },\r\n                },\r\n                ticks: {\r\n                  text: {\r\n                    fill: primary,\r\n                  },\r\n                },\r\n              },\r\n            }}\r\n            legends={legends}\r\n          />\r\n        </Container>\r\n      </Scroller>\r\n      {isMobile ? (\r\n        <Tip>Deslize horizontalmente para ver os dados. Clique para detalhes</Tip>\r\n      ) : (\r\n        <Tip>Passe o mouse para obter detalhes</Tip>\r\n      )}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default MyResponsiveLine;\r\n"]},"metadata":{},"sourceType":"module"}