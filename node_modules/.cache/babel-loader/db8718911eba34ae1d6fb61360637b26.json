{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fbc62\\\\OneDrive\\\\Desktop\\\\covid19\\\\src\\\\components\\\\World\\\\index.js\";\nimport React, { memo, useContext, useMemo } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { scaleLog } from 'd3-scale';\nimport { format } from 'date-fns';\nimport { ComposableMap, Geographies, Geography, Sphere, Graticule } from 'react-simple-maps';\nimport AppContext from \"../../util/AppContext\";\nimport useMobileWatcher from \"../../util/useMobileWatcher\";\nimport { Tip, Container, CountryStats } from './styles';\nconst geoUrl = 'https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json';\n\nconst MapChart = ({\n  setTooltipContent\n}) => {\n  const {\n    countriesData\n  } = useContext(AppContext);\n  const {\n    colors\n  } = useContext(ThemeContext);\n  const isMobile = useMobileWatcher();\n  const colorScale = useMemo(() => {\n    const {\n      lowestValue = 0,\n      biggestValue = 0\n    } = countriesData;\n    return scaleLog().domain([lowestValue, biggestValue]).range(['#E6A6A6', '#E60000']);\n  }, [countriesData]);\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(ComposableMap, {\n    \"data-tip\": \"\",\n    width: isMobile ? 450 : 600,\n    height: 215,\n    projectionConfig: {\n      rotate: [0, 0, 0],\n      scale: 80\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(Sphere, {\n    stroke: \"#E4E5E6\",\n    strokeWidth: 0.5,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), React.createElement(Graticule, {\n    stroke: \"#E4E5E6\",\n    strokeWidth: 0.5,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), React.createElement(Geographies, {\n    geography: geoUrl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, ({\n    geographies\n  }) => geographies.map(geo => {\n    const d = countriesData[geo.properties.ISO_A3];\n    return React.createElement(Geography, {\n      key: geo.rsmKey,\n      geography: geo,\n      fill: d ? colorScale(d.confirmed) : '#D6D6DA',\n      onMouseEnter: () => {\n        const {\n          NAME,\n          ISO_A3\n        } = geo.properties;\n        const country = countriesData[ISO_A3];\n        const {\n          confirmed = 0,\n          deaths = 0,\n          recovered = 0,\n          lastUpdate\n        } = country || {};\n        setTooltipContent(React.createElement(CountryStats, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }, React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, NAME), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }, \"Confirmados: \", confirmed), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }, \"Suspeitas: \", recovered), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, \"Mortes: \", deaths), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, \"Ultimo update:\", ' ', lastUpdate !== undefined ? format(new Date(lastUpdate), 'MM/dd/yyyy') : '-')));\n      },\n      onMouseLeave: () => {\n        setTooltipContent('');\n      },\n      style: {\n        hover: {\n          stroke: colors.mapStroke,\n          strokeWidth: 0.7,\n          outline: 'none'\n        },\n        pressed: {\n          stroke: colors.mapStroke,\n          strokeWidth: 1,\n          outline: 'none'\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    });\n  }))), React.createElement(Tip, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, isMobile ? 'Clique para estatísticas do país' : 'Passe o mouse sobre as estatísticas do país'));\n};\n\nexport default memo(MapChart);","map":{"version":3,"sources":["C:/Users/fbc62/OneDrive/Desktop/covid19/src/components/World/index.js"],"names":["React","memo","useContext","useMemo","ThemeContext","scaleLog","format","ComposableMap","Geographies","Geography","Sphere","Graticule","AppContext","useMobileWatcher","Tip","Container","CountryStats","geoUrl","MapChart","setTooltipContent","countriesData","colors","isMobile","colorScale","lowestValue","biggestValue","domain","range","rotate","scale","geographies","map","geo","d","properties","ISO_A3","rsmKey","confirmed","NAME","country","deaths","recovered","lastUpdate","undefined","Date","hover","stroke","mapStroke","strokeWidth","outline","pressed"],"mappings":"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","sourcesContent":["import React, { memo, useContext, useMemo } from 'react';\r\nimport { ThemeContext } from 'styled-components';\r\nimport { scaleLog } from 'd3-scale';\r\nimport { format } from 'date-fns';\r\nimport {\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography,\r\n  Sphere,\r\n  Graticule,\r\n} from 'react-simple-maps';\r\n\r\nimport AppContext from '~/util/AppContext';\r\nimport useMobileWatcher from '~/util/useMobileWatcher';\r\n\r\nimport { Tip, Container, CountryStats } from './styles';\r\n\r\nconst geoUrl =\r\n  'https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json';\r\n\r\nconst MapChart = ({ setTooltipContent }) => {\r\n  const { countriesData } = useContext(AppContext);\r\n  const { colors } = useContext(ThemeContext);\r\n  const isMobile = useMobileWatcher();\r\n\r\n  const colorScale = useMemo(() => {\r\n    const { lowestValue = 0, biggestValue = 0 } = countriesData;\r\n    return scaleLog()\r\n      .domain([lowestValue, biggestValue])\r\n      .range(['#E6A6A6', '#E60000']);\r\n  }, [countriesData]);\r\n\r\n  return (\r\n    <Container>\r\n      <ComposableMap\r\n        data-tip=\"\"\r\n        width={isMobile ? 450 : 600}\r\n        height={215}\r\n        projectionConfig={{\r\n          rotate: [0, 0, 0],\r\n          scale: 80,\r\n        }}\r\n      >\r\n        <Sphere stroke=\"#E4E5E6\" strokeWidth={0.5} />\r\n        <Graticule stroke=\"#E4E5E6\" strokeWidth={0.5} />\r\n        <Geographies geography={geoUrl}>\r\n          {({ geographies }) =>\r\n            geographies.map(geo => {\r\n              const d = countriesData[geo.properties.ISO_A3];\r\n              return (\r\n                <Geography\r\n                  key={geo.rsmKey}\r\n                  geography={geo}\r\n                  fill={d ? colorScale(d.confirmed) : '#D6D6DA'}\r\n                  onMouseEnter={() => {\r\n                    const { NAME, ISO_A3 } = geo.properties;\r\n                    const country = countriesData[ISO_A3];\r\n                    const {\r\n                      confirmed = 0,\r\n                      deaths = 0,\r\n                      recovered = 0,\r\n                      lastUpdate,\r\n                    } = country || {};\r\n                    setTooltipContent(\r\n                      <CountryStats>\r\n                        <h5>{NAME}</h5>\r\n                        <p>Confirmados: {confirmed}</p>\r\n                        <p>Suspeitas: {recovered}</p>\r\n                        <p>Mortes: {deaths}</p>\r\n                        <p>\r\n                          Ultimo update:{' '}\r\n                          {lastUpdate !== undefined\r\n                            ? format(new Date(lastUpdate), 'MM/dd/yyyy')\r\n                            : '-'}\r\n                        </p>\r\n                      </CountryStats>\r\n                    );\r\n                  }}\r\n                  onMouseLeave={() => {\r\n                    setTooltipContent('');\r\n                  }}\r\n                  style={{\r\n                    hover: {\r\n                      stroke: colors.mapStroke,\r\n                      strokeWidth: 0.7,\r\n                      outline: 'none',\r\n                    },\r\n                    pressed: {\r\n                      stroke: colors.mapStroke,\r\n                      strokeWidth: 1,\r\n                      outline: 'none',\r\n                    },\r\n                  }}\r\n                />\r\n              );\r\n            })\r\n          }\r\n        </Geographies>\r\n      </ComposableMap>\r\n      <Tip>\r\n        {isMobile ? 'Clique para estatísticas do país' : 'Passe o mouse sobre as estatísticas do país'}\r\n      </Tip>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default memo(MapChart);\r\n"]},"metadata":{},"sourceType":"module"}